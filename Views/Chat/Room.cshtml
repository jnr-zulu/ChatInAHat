@model List<ChatInAHat.ChatMessage>

<div class="container-fluid mt-5">
    <h2>@ViewBag.RoomName</h2>
    <div class="row">
        <div class="col-md-9">
            <div id="messagesList" class="border rounded p-3 mb-3" style="height: 400px; overflow-y: scroll;">
                @foreach (var message in Model)
                {
                    <div class="message">
                        <strong>@message.UserId</strong>
                        <span class="text-muted small">@message.Timestamp.ToString("g")</span>
                        <p>@message.Content</p>
                    </div>
                }
            </div>
            <form id="messageForm">
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your message...">
                    <button class="btn btn-primary" type="submit">Send</button>
                </div>
            </form>
        </div>
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    Online Users
                </div>
                <ul id="userList" class="list-group list-group-flush">
                    <!-- Online users will be dynamically added here -->
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
        const roomId = @ViewBag.RoomId;

        connection.on("ReceiveMessage", (user, message, timestamp) => {
            const messagesList = document.getElementById("messagesList");
            const messageDiv = document.createElement("div");
            messageDiv.className = "message";
            messageDiv.innerHTML = `<strong>${user}</strong> <span class="text-muted small">${new Date(timestamp).toLocaleString()}</span><p>${message}</p>`;
            messagesList.appendChild(messageDiv);
            messagesList.scrollTop = messagesList.scrollHeight;
        });

        connection.start().then(() => {
            connection.invoke("JoinRoom", roomId);
        }).catch(err => console.error(err));

        document.getElementById("messageForm").addEventListener("submit", event => {
            event.preventDefault();
            const message = document.getElementById("messageInput").value;
            connection.invoke("SendMessage", roomId, message).catch(err => console.error(err));
            document.getElementById("messageInput").value = "";
        });

        window.addEventListener("beforeunload", () => {
            connection.invoke("LeaveRoom", roomId);
        });
    </script>
}